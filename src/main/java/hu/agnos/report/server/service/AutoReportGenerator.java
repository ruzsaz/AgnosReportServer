package hu.agnos.report.server.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import lombok.AllArgsConstructor;

import hu.agnos.cube.meta.resultDto.CubeList;
import hu.agnos.cube.meta.resultDto.CubeMetaDTO;
import hu.agnos.cube.meta.resultDto.DimensionDTO;
import hu.agnos.cube.meta.resultDto.MeasureDTO;
import hu.agnos.report.entity.Cube;
import hu.agnos.report.entity.Dimension;
import hu.agnos.report.entity.Indicator;
import hu.agnos.report.entity.Report;
import hu.agnos.report.entity.ReportHelp;
import hu.agnos.report.entity.ReportLabels;
import hu.agnos.report.entity.Visualization;

@AllArgsConstructor
public class AutoReportGenerator {

    CubeList cubeList;

    public List<Report> getAll() {
        List<Report> reportList = new ArrayList<>(cubeList.cubeMap().size());
        for (Map.Entry<String, CubeMetaDTO> entry : cubeList.cubeMap().entrySet()) {
            Cube cube = new Cube(entry.getKey(), "AutoGenerated");
            reportList.add(fromCube(cube));
        }
        return reportList;
    }

    public Report fromCube(Cube cube) {
        CubeMetaDTO cubeMetaDTO = cubeList.cubeMap().get(cube.getName());
        Report report = new Report("_" + cube.getName() + "_AutoReport", "public");

        List<Cube> cubes = new ArrayList<>(1);
        cubes.add(cube);
        report.setCubes(cubes);

        List<ReportLabels> reportLabelsList = new ArrayList<>(2);
        reportLabelsList.add(new ReportLabels("", "_" + cube.getName(), "_autoReport", "_" + cube.getName() + "_autoReport_hu"));
        reportLabelsList.add(new ReportLabels("en", "_" + cube.getName(), "_AutoReport", "_" + cube.getName() + "_AutoReport_en"));
        report.setLabels(reportLabelsList);

        List<ReportHelp> reportHelpList = new ArrayList<>(2);
        reportHelpList.add(new ReportHelp("", "Magától létrejött autoReport leírás."));
        reportHelpList.add(new ReportHelp("en", "Autogenerated autoReport description."));
        report.setHelps(reportHelpList);

        List<Dimension> dimensionList = new ArrayList<>(cubeMetaDTO.dimensionHeader().size());
        for (DimensionDTO dimensionDTO : cubeMetaDTO.dimensionHeader()) {
            Dimension dimension = new Dimension(reportLabelsList);
            dimension.setName(dimensionDTO.name());
            dimension.setAllowedDepth(dimensionDTO.maxDepth());
            dimension.getMultilingualization().get(0).setCaption(dimensionDTO.name());
            dimension.getMultilingualization().get(0).setDescription(dimensionDTO.name() + " leírás");
            dimension.getMultilingualization().get(0).setTopLevelString("Összes");
            dimension.getMultilingualization().get(1).setCaption(dimensionDTO.name() + "_en");
            dimension.getMultilingualization().get(1).setDescription(dimensionDTO.name() + " description");
            dimension.getMultilingualization().get(1).setTopLevelString("All");
            dimensionList.add(dimension);
        }
        report.setDimensions(dimensionList);

        List<Indicator> indicatorList = new ArrayList<>(cubeMetaDTO.measureHeader().size());
        for (MeasureDTO measureDTO : cubeMetaDTO.measureHeader()) {
            Indicator indicator = new Indicator(reportLabelsList);

            indicator.setDenominatorName("1");
            indicator.setDenominatorCubeName("");
            indicator.setDenominatorIsHidden(true);
            indicator.setValueName(measureDTO.name());
            indicator.setValueCubeName(cube.getName());
            indicator.setValueIsHidden(false);

            indicator.getMultilingualization().get(0).setCaption(measureDTO.name());
            indicator.getMultilingualization().get(0).setDescription(measureDTO.name() + " leírás");
            indicator.getMultilingualization().get(0).setValueUnit("bigyó");
            indicator.getMultilingualization().get(0).setValueUnitPlural("bigyó");
            indicator.getMultilingualization().get(0).setDenominatorUnit("bigyó");
            indicator.getMultilingualization().get(0).setDenominatorUnitPlural("bigyó");
            indicator.getMultilingualization().get(1).setCaption(measureDTO.name()+"_en");
            indicator.getMultilingualization().get(1).setDescription(measureDTO.name() + " description");
            indicator.getMultilingualization().get(1).setValueUnit("thing");
            indicator.getMultilingualization().get(1).setValueUnitPlural("things");
            indicator.getMultilingualization().get(1).setDenominatorUnit("thing");
            indicator.getMultilingualization().get(1).setDenominatorUnitPlural("things");
            indicatorList.add(indicator);
        }
        report.setIndicators(indicatorList);

        List<Visualization> visualizationList = new ArrayList<>(cubeMetaDTO.dimensionHeader().size());
        for (int i = 0; i < cubeMetaDTO.dimensionHeader().size(); i++) {
            visualizationList.add(new Visualization("panel_barline({dim: " + i + ", valbars: [0], vallines: []})"));
        }
        report.setVisualizations(visualizationList);

        return report;
    }

}
